# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# local config
ROUND_FREQUENCY = 120  # how often we run a round, in seconds
PLAYER_TIME     =  30  # how long the player code runs in each round, in seconds

PLAYERS = ['p'+str(i) for i in range(1,3)]
SINKS   = ['s'+str(i) for i in range(1,3)]

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = ([worker.Worker("player-{}".format(p), "pass") for p in PLAYERS] +
                [worker.Worker("sink-{}".format(s),   "pass") for s in SINKS])

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

c['schedulers'] = []
c['schedulers'].append(schedulers.Periodic(
    name='1min',
    builderNames=['run-player-{}'.format(i) for i in PLAYERS],
    periodicBuildTimer=ROUND_FREQUENCY,
))
c['schedulers'].append(schedulers.ForceScheduler(
    name="force-all",
    builderNames=['run-player-{}'.format(i) for i in PLAYERS],
))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

def player_factory_factory(player_id):
    player_factory = util.BuildFactory()
    # put the user's code on the worker
    player_factory.addStep(steps.FileDownload(mastersrc='/tmp/submit-{}.py'.format(player_id),
                                              workerdest='./submit-{}.py'.format(player_id)))
    # run it
    player_factory.addStep(steps.ShellCommand(command=['python3', "./submit-{}.py".format(player_id)],
                                              initialStdin='TODO',
                                              env={"PYTHONPATH": "."},
                                              maxTime=PLAYER_TIME,
                                              sigtermTime=1,
                                              logEnviron=False))
    # TODO give the code's stdout back to the users
    # TODO trigger 'get-results'
    return player_factory

# TODO this needs the server, it's kinda hard to test it without it
# sink_factory = util.BuildFactory()

c['builders'] = []
c['builders'] += [
    util.BuilderConfig(
        name="run-player-{}".format(player_id),
        workernames=["player-{}".format(player_id)],
        factory=player_factory_factory(player_id))
    for player_id in PLAYERS
]
# c['builders'].append(
#     util.BuilderConfig(name="get-results",
#       workernames=["sink1"],
#       factory=sink_factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "SCIONLab Workshop"
c['titleURL'] = c['buildbotURL']

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # It's easy to start with sqlite, but it's recommended to switch to a dedicated
    # database, such as PostgreSQL or MySQL, for use in production environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url' : "sqlite:///state.sqlite",
}

c['buildbotNetUsageData'] = 'basic'
